ANGULAR APP PLAN

DEVELOPMENT OVERVIEW
1. Frontend: Angular (TypeScript, HTML, CSS)
2. Backend: C# .NET Web API
3. Database: SQL Server
4. Data Access: ADO.NET (instead of Entity Framework)
5. Communication: HTTP (REST API)

APP OVERVIEW
I. Features
	1. Add a new personal information entry
	2. View the list of entries
	3. Update an existing entry
	4. Delete an entry
	5. Form validation for input fields

FRONTEND DEVELOPMENT
I. Create a new Angular Project
II. Generate a Service (personal-info.service.ts)
	1. Use HttpClient to call the backend API
III. Create Components
	1. PersonalInfoFormComponent ? Handles form submission
	2. PersonalInfoListComponent ? Displays a list of records
IV. Implement Validation in the Form
	1. Required fields (FirstName, LastName, Email)
	2. Email format validation
	3. Phone number must be numeric
V. Use Bootstrap for Styling

WEB API DEVELOPMENT/CONFIGURATION
I. Create a new ASP.NET Core Web API Project
II. Set up SQL Server Connection (Using ADO.NET)
	1. Define a connectionString in appsettings.json
	2. Use SqlConnection, SqlCommand, and SqlDataReader
III. Implement CRUD Operations
	1. GET /api/personalinfo ? Fetch all records
	2. GET /api/personalinfo/{id} ? Fetch a specific record
	3. POST /api/personalinfo ? Insert a new record
	4. PUT /api/personalinfo/{id} ? Update an existing record
	5. DELETE /api/personalinfo/{id} ? Delete a record

DATABASE MODELLING
1. Table Name - UserInfo
2. Columns
Name			Data Type						Description
ID			INT (Primary Key, Identity)				Unique identifier for each record
FirstName		VARCHAR(50)						User's first name
LastName		VARCHAR(50)						User's last name
Email			VARCHAR(255)						User's email
PhoneNumber		VARCHAR(15)						User's phone number
	
API + DATABASE
1. The Angular app calls the C# Web API using HTTP requests
2. The API interacts with SQL Server using ADO.NET
3. The database stores user data persistently

UNIT TESTING
I. Frontend
	- Ensure form validation and API calls work
II. Backend
	- Write tests for the API endpoints
III. Postman Testing
	- Verifying API response

